package com.perisatto.fiapprj.menuguru_order.application.usecases;

import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Optional;
import java.util.Set;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.ActiveProfiles;

import com.perisatto.fiapprj.menuguru_order.application.interfaces.CustomerRepository;
import com.perisatto.fiapprj.menuguru_order.application.interfaces.OrderRepository;
import com.perisatto.fiapprj.menuguru_order.application.interfaces.PaymentProcessor;
import com.perisatto.fiapprj.menuguru_order.application.interfaces.PaymentRepository;
import com.perisatto.fiapprj.menuguru_order.application.interfaces.ProductRepository;
import com.perisatto.fiapprj.menuguru_order.domain.entities.customer.CPF;
import com.perisatto.fiapprj.menuguru_order.domain.entities.customer.Customer;
import com.perisatto.fiapprj.menuguru_order.domain.entities.order.Order;
import com.perisatto.fiapprj.menuguru_order.domain.entities.order.OrderItem;
import com.perisatto.fiapprj.menuguru_order.domain.entities.order.OrderStatus;
import com.perisatto.fiapprj.menuguru_order.domain.entities.payment.Payment;
import com.perisatto.fiapprj.menuguru_order.domain.entities.product.Product;
import com.perisatto.fiapprj.menuguru_order.domain.entities.product.ProductType;
import com.perisatto.fiapprj.menuguru_order.handler.exceptions.NotFoundException;
import com.perisatto.fiapprj.menuguru_order.handler.exceptions.ValidationException;


@ActiveProfiles(value = "test")
public class OrderUseCaseTest {

	private OrderUseCase orderUseCase;

	@Mock
	private OrderRepository orderRepository;

	@Mock
	private CustomerRepository customerRepository;

	@Mock
	private ProductRepository productRepository;

	@Mock	
	private PaymentProcessor paymentProcessor; 

	@Mock
	private PaymentRepository paymentRepository;	

	AutoCloseable openMocks;

	@BeforeEach
	void setUp() {
		openMocks = MockitoAnnotations.openMocks(this);
		orderUseCase = new OrderUseCase(orderRepository, customerRepository, productRepository, paymentProcessor, paymentRepository);
	}

	@AfterEach
	void tearDown() throws Exception {
		openMocks.close();
	}

	@Nested
	class CreateOrder {

		@Test
		void givenValidDataAndCustomer_thenCreatesOrder() throws Exception {
			Customer customer = getCustomer();

			when(customerRepository.getCustomerById(any(Long.class)))
			.thenReturn(Optional.of(customer));

			Product product = getProduct();

			when(productRepository.getProductById(any(Long.class)))
			.thenReturn(Optional.of(product));

			Payment payment = getPayment();

			when(paymentProcessor.createPayment(any(Payment.class)))
			.thenReturn(payment);


			when(orderRepository.createOrder(any(Order.class)))
			.thenAnswer(i -> i.getArgument(0));

			Set<OrderItem> itemList = new LinkedHashSet<OrderItem>();

			OrderItem item = new OrderItem(10L, 10.0, 1);

			itemList.add(item);

			orderUseCase.createOrder(10L, itemList);

			verify(orderRepository, times(1)).createOrder(any(Order.class));
			verify(customerRepository, times(1)).getCustomerById(any(Long.class));
			verify(productRepository, times(1)).getProductById(any(Long.class));
		}

		@Test
		void givenNoCustomer_thenCreateOrder() throws Exception {			
			Product product = getProduct();

			when(productRepository.getProductById(any(Long.class)))
			.thenReturn(Optional.of(product));

			Payment payment = getPayment();

			when(paymentProcessor.createPayment(any(Payment.class)))
			.thenReturn(payment);


			when(orderRepository.createOrder(any(Order.class)))
			.thenAnswer(i -> i.getArgument(0));

			Set<OrderItem> itemList = new LinkedHashSet<OrderItem>();

			OrderItem item = new OrderItem(10L, 10.0, 1);

			itemList.add(item);

			orderUseCase.createOrder(null, itemList);

			verify(orderRepository, times(1)).createOrder(any(Order.class));
			verify(productRepository, times(1)).getProductById(any(Long.class));
		}

		@Test
		void givenInexistentCustomer_thenRefusesCreateOrder() throws Exception {		
			when(customerRepository.getCustomerById(any(Long.class)))
			.thenReturn(Optional.empty());

			Product product = getProduct();

			when(productRepository.getProductById(any(Long.class)))
			.thenReturn(Optional.of(product));

			Payment payment = getPayment();

			when(paymentProcessor.createPayment(any(Payment.class)))
			.thenReturn(payment);


			when(orderRepository.createOrder(any(Order.class)))
			.thenAnswer(i -> i.getArgument(0));

			Set<OrderItem> itemList = new LinkedHashSet<OrderItem>();

			OrderItem item = new OrderItem(10L, 10.0, 1);

			itemList.add(item);

			try {
				orderUseCase.createOrder(10L, itemList);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).createOrder(any(Order.class));
			}
		}

		@Test
		void givenInexistentProduct_thenRefusesCreateOrder() throws Exception {
			Customer customer = getCustomer();

			when(customerRepository.getCustomerById(any(Long.class)))
			.thenReturn(Optional.of(customer));

			when(productRepository.getProductById(any(Long.class)))
			.thenReturn(Optional.empty());

			Payment payment = getPayment();

			when(paymentProcessor.createPayment(any(Payment.class)))
			.thenReturn(payment);


			when(orderRepository.createOrder(any(Order.class)))
			.thenAnswer(i -> i.getArgument(0));

			Set<OrderItem> itemList = new LinkedHashSet<OrderItem>();

			OrderItem item = new OrderItem(10L, 10.0, 1);

			itemList.add(item);

			try {
				orderUseCase.createOrder(10L, itemList);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).createOrder(any(Order.class));
			}
		}

		private Payment getPayment() {
			Payment payment = new Payment(null);
			return payment;
		}

		private Product getProduct() throws Exception {
			String base64ProductImage = "";

			String description = "O x-bacon é um sanduíche irresistível que une o sabor intenso do bacon crocante com queijo derretido"
					+ ", alface, tomate e um suculento hambúrguer, tudo envolto em um pão macio e tostado. "
					+ "Uma explosão de sabores em cada mordida!";


			Product product = new Product("X-Bacon", ProductType.ACOMPANHAMENTO, description, 10.0, base64ProductImage);
			product.setId(10L);

			return product;
		}

		private Customer getCustomer() throws Exception {
			Customer customerData = new Customer(10L, new CPF("90779778057"), "Roberto Machado", "roberto.machado@bestmail.com");
			return customerData;
		}
	}

	@Nested
	class RetrieveOrder {

		@Test
		void givenValidId_thenRetrieveOrder() throws Exception {

			Order order = getOrder();

			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));

			orderUseCase.getOrder(10L);
			verify(orderRepository, times(1)).getOrder(any(Long.class));
		}

		@Test
		void givenInexistentId_thenRefusesGetOrder() throws Exception {

			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.empty());

			try {
				orderUseCase.getOrder(10L);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(1)).getOrder(any(Long.class));
			}
		}
		
		@Test
		void listOrders() throws Exception {
			when(orderRepository.findAll(any(Integer.class), any(Integer.class)))
			.thenAnswer(i -> {
				Set<Order> orderList = new LinkedHashSet<Order>();
				Order order1 = getOrder();
				Order order2 = getOrder();
				orderList.add(order1);
				orderList.add(order2);
				return orderList;
			});
			
			orderUseCase.findAllOrders(50, 1);
			
			verify(orderRepository, times(1)).findAll(any(Integer.class), any(Integer.class));
		}
		
		@Test
		void givenNoParameters_thenlistOrders() throws Exception {
			when(orderRepository.findAll(any(Integer.class), any(Integer.class)))
			.thenAnswer(i -> {
				Set<Order> orderList = new LinkedHashSet<Order>();
				Order order1 = getOrder();
				Order order2 = getOrder();
				orderList.add(order1);
				orderList.add(order2);
				return orderList;
			});
			
			orderUseCase.findAllOrders(null, null);
			
			verify(orderRepository, times(1)).findAll(any(Integer.class), any(Integer.class));
		}
		
		@Test
		void givenInvalidLimitParameter_theRefusesListOrders() throws Exception {
			
			try {
				orderUseCase.findAllOrders(100, null);
			} catch (Exception e) {
				assertThatExceptionOfType(ValidationException.class);
				verify(orderRepository, times(0)).findAll(any(Integer.class), any(Integer.class));
			}	
			
			try {
				orderUseCase.findAllOrders(-1, null);
			} catch (Exception e) {
				assertThatExceptionOfType(ValidationException.class);
				verify(orderRepository, times(0)).findAll(any(Integer.class), any(Integer.class));
			}	
		}
		
		@Test
		void givenInvalidPageParameter_theRefusesListOrders() throws Exception {
			
			try {
				orderUseCase.findAllOrders(null, 0);
			} catch (Exception e) {
				assertThatExceptionOfType(ValidationException.class);
				verify(orderRepository, times(0)).findAll(any(Integer.class), any(Integer.class));
			}	
		}
		
		@Test
		void retrievePreparationQueue() throws Exception {
			when(orderRepository.listPreparationQueue(any(Integer.class), any(Integer.class)))
			.thenAnswer(i -> {
				Set<Order> orderList = new LinkedHashSet<Order>();
				Order order1 = getOrder();
				Order order2 = getOrder();
				orderList.add(order1);
				orderList.add(order2);
				return orderList;
			});
			
			orderUseCase.listPreparationQueue(50, 1);
			
			verify(orderRepository, times(1)).listPreparationQueue(any(Integer.class), any(Integer.class));
		}
		
		@Test
		void givenNoParameters_thenRetrievePreparationQueue() throws Exception {
			when(orderRepository.listPreparationQueue(any(Integer.class), any(Integer.class)))
			.thenAnswer(i -> {
				Set<Order> orderList = new LinkedHashSet<Order>();
				Order order1 = getOrder();
				Order order2 = getOrder();
				orderList.add(order1);
				orderList.add(order2);
				return orderList;
			});
			
			orderUseCase.listPreparationQueue(null, null);
			
			verify(orderRepository, times(1)).listPreparationQueue(any(Integer.class), any(Integer.class));
		}

		private Order getOrder() throws Exception {
			Set<OrderItem> orderItems = new LinkedHashSet<OrderItem>();

			OrderItem orderItem = new OrderItem(10L, 10.0, 1);

			orderItems.add(orderItem);

			Order order = new Order(OrderStatus.PRONTO, 10L, orderItems);
			order.setReadyToPrepare(new Date());
			return order;
		}
	}
	
	@Nested
	class UpdateOrder {
		
		@Test
		void givenValidStatus_thenUpdatesOrder() throws Exception {
			Order order = getOrder();
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			when(orderRepository.updateOrder(any(Order.class)))
			.thenReturn(Optional.of(order));
			
			orderUseCase.updateOrder(10L, OrderStatus.FINALIZADO.toString());
			
			verify(orderRepository, times(1)).updateOrder(any(Order.class));
		}
		
		@Test
		void givenValidStatus_butOrderDeleted_thenRefusesUpdatesOrder() throws Exception {
			Order order = getOrder();
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			when(orderRepository.updateOrder(any(Order.class)))
			.thenReturn(Optional.empty());
			
			try {
				orderUseCase.updateOrder(10L, OrderStatus.FINALIZADO.toString());
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(1)).updateOrder(any(Order.class));
			}		
		}

		@Test
		void givenSameValidStatus_butOrderDeleted_thenRefusesUpdatesOrder() throws Exception {
			Order order = getOrder();
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			try {
				orderUseCase.updateOrder(10L, OrderStatus.RECEBIDO.toString());
			} catch (Exception e) {
				assertThatExceptionOfType(ValidationException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}		
		}
		
		@Test
		void givenInvalidStatus_thenRefusesUpdatesOrder() throws Exception {
			Order order = getOrder();
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			when(orderRepository.updateOrder(any(Order.class)))
			.thenReturn(Optional.empty());
			
			try {
				orderUseCase.updateOrder(10L, "ACABADO");
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}		
		}
		
		@Test
		void givenInvalidId_thenRefusesUpdatesOrder() throws Exception {			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.empty());
			
			when(orderRepository.updateOrder(any(Order.class)))
			.thenReturn(Optional.empty());
			
			try {
				orderUseCase.updateOrder(10L, OrderStatus.FINALIZADO.toString());
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}		
		}
		
		@Test
		void givenValidId_thenCancelOrder() throws Exception {
			Order order = getOrder();
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			when(orderRepository.updateOrder(any(Order.class)))
			.thenReturn(Optional.of(order));
			
			orderUseCase.cancelOrder(10L);
			
			verify(orderRepository, times(1)).updateOrder(any(Order.class));
		}
		
		@Test
		void givenInvalidId_thenRefusesCancelOrder() throws Exception {
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.empty());
			
			try {
				orderUseCase.cancelOrder(10L);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}	
		}		
		
		@Test
		void givenValidId_butOrderDeleted_thenRefusesCancelOrder() throws Exception {
			Order order = getOrder();
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			when(orderRepository.updateOrder(any(Order.class)))
			.thenReturn(Optional.empty());
			
			try {
				orderUseCase.cancelOrder(10L);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(1)).updateOrder(any(Order.class));
			}		
		}
		
		@Test
		void givenInvalidStatus_thenRefusesCancelOrder() throws Exception {
			
			Order order = getOrder();
			order.setStatus(OrderStatus.PRONTO);
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			try {
				orderUseCase.cancelOrder(10L);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}		
			
			order.setStatus(OrderStatus.FINALIZADO);
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			try {
				orderUseCase.cancelOrder(10L);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}
			
			order.setStatus(OrderStatus.CANCELADO);
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			try {
				orderUseCase.cancelOrder(10L);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}
		}
		
		@Test
		void givenValidData_thenConfirmPayment() throws Exception {
			
			Order order = getOrder();
			order.setStatus(OrderStatus.PENDENTE_PAGAMENTO);
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			when(orderRepository.updateOrder(any(Order.class)))
			.thenReturn(Optional.of(order));
			
			String paymentData = "{\"data\": {\"id\": 10 }}";
			
			orderUseCase.confirmPayment(10L, paymentData);
		}
		
		@Test
		void givenInvalidData_thenRefusesConfirmPayment() throws Exception {
			
			Order order = getOrder();
			order.setStatus(OrderStatus.PENDENTE_PAGAMENTO);
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));		
			
			String paymentData = "{\"data\": 10 }}";
			
			try {
				orderUseCase.confirmPayment(10L, paymentData);
			} catch (Exception e) {
				assertThatExceptionOfType(ValidationException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}
		}
		
		@Test
		void givenInvalidStatus_thenRefusesConfirmPayment() throws Exception {
			
			Order order = getOrder();
			order.setStatus(OrderStatus.PRONTO);
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));		
			
			String paymentData = "{\\\"data\\\": 10 }}";
			
			try {
				orderUseCase.confirmPayment(10L, paymentData);
			} catch (Exception e) {
				assertThatExceptionOfType(ValidationException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}
		}
		
		@Test
		void givenInexistentId_thenRefusesConfirmPayment() throws Exception {
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.empty());		
			
			String paymentData = "{\\\"data\\\": 10 }}";
			
			try {
				orderUseCase.confirmPayment(10L, paymentData);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(0)).updateOrder(any(Order.class));
			}
		}
		
		@Test
		void givenValidData_butOrderDeleted_thenConfirmPayment() throws Exception {
			
			Order order = getOrder();
			order.setStatus(OrderStatus.PENDENTE_PAGAMENTO);
			
			when(orderRepository.getOrder(any(Long.class)))
			.thenReturn(Optional.of(order));
			
			when(orderRepository.updateOrder(any(Order.class)))
			.thenReturn(Optional.empty());
			
			String paymentData = "{\"data\": {\"id\": 10 }}";
			
			try {
				orderUseCase.confirmPayment(10L, paymentData);
			} catch (Exception e) {
				assertThatExceptionOfType(NotFoundException.class);
				verify(orderRepository, times(1)).updateOrder(any(Order.class));
			}
		}
		
		private Order getOrder() throws Exception {
			Set<OrderItem> orderItems = new LinkedHashSet<OrderItem>();

			OrderItem orderItem = new OrderItem(10L, 10.0, 1);

			orderItems.add(orderItem);

			Order order = new Order(OrderStatus.RECEBIDO, 10L, orderItems);
			order.setReadyToPrepare(new Date());
			return order;
		}
	}
}
